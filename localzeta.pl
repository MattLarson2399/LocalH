#!/usr/bin/perl
#Contributors: Matt Larson
#Last updated: 08/17/2019

#computes the topological local zeta function associated to a Newton polyhedron

use strict;
use warnings;
use application "polytope";
use PDL;
use Algorithm::Combinatorics "subsets";
#use Math::Matrix;

script("/Users/matthew/Desktop/Local_Zeta_Function/code/subs.pl");

#usage: multiplicityArray(AoA)
#computes the multiplicity of an array of r integer vectors
#i.e. computes the index of the lattice generated by the vectors in the group of all lattice points 
#in the vector space spanned by the vectors
#does this by taking the gcd of the determinents of the rxr minors
sub multiplicityArray{
	my @vectors = @{shift @_};
	my $num = scalar(@vectors);
	my @minors = subsets([0..scalar(@{$vectors[0]})-1], $num);
	#constructs matrix 
	my @matrixAoa = ();
	for my $i(0..($num - 1)){
		my @row = ();
		for my $j (0..($num - 1)){
			push(@row, $vectors[$i]->[$j]);
		}
		push(@matrixAoa, \@row);
	}
	my $a = pdl[\@matrixAoa];
	my $gcd = new Integer abs((det($a)->list)[0]);
	for my $sub(@minors){
		@matrixAoa = ();
		for my $i(0..($num - 1)){
			my @row = ();
			for my $j (0..($num - 1)){
				push(@row, $vectors[$i]->[$sub->[$j]]);
			}
			push(@matrixAoa, \@row);
		}
		$a = pdl[\@matrixAoa];
		my $toint = new Integer(abs((det($a)->list)[0]));
		$gcd = gcd($gcd, $toint);
		if ($gcd == 1){
			last;
		}
	}
	return $gcd;
}

#usage: newtonPolyhedron($diagram)
#diagram does not need to be reduced
#outputs the newton polyhedron as a polyhedron
sub newtonPolyhedron{
	my $diagram = shift;
	my $proj = toReverseProjectiveArray($diagram);
	my $dim = scalar(@{$diagram->[0]});
	my $verts = standard_simplex_vertices($dim - 1);
	map(unshift($_, 0), @{$verts});
	push(@{$proj}, @{$verts});
	my $Mat=new Matrix<Rational>($proj);
	my $p = new Polytope(POINTS=>$Mat);
	return $p;
}

#usage: dualFan($diagram)
#creates the dual fan by making the newton polyhedron
sub dualFan{
	my $diagram = shift;
	my $newton = newtonPolyhedron($diagram);
	my $fan = fan::normal_fan($newton);
	return $fan;
}

#usage: changeToPrimitive($arref)
#assumes every entry is either 1 or 0 or a non-integer Rational
#returns a primitive integer vector in that direction
sub changeToPrimitive{
	my @array = @{shift @_};
	my $denom = 1;
	for my $n (@array){
		if (($n == 0) or ($n == 1)){
			next;
		}
		$denom = denominator($n) * $denom;
	}
	my @result;
	for my $n (@array){
		my $a = new Integer($n * $denom);
		push(@result, $a);
	}
	return makePrimitive(\@result);
}

#usage:dotProduct($aref, $aref)
#arefs should be the same length
#computes the dot product
sub dotProduct{
	my $vec1 = shift;
	my $vec2 = shift;
	my $answer = 0;
	for my $i (0..(scalar(@{$vec1}) - 1)){
		$answer += ($vec1->[$i])*($vec2->[$i]);
	}
	return $answer;
}


#usage: computeN($point, $diagram)
#takes a point in the dual fan
#compute the minimimum value of the pairing of that with the newton polyhedron
sub computeN{
	my $point = shift;
	my $diagram = shift;
	my $best = dotProduct($point, $diagram->[0]);
	for my $i (0..(scalar(@{$diagram}) - 1)){
		if ($best > dotProduct($point, $diagram->[$i])){
			$best = dotProduct($point, $diagram->[$i]);
		}
	}
	return $best;
}

#usage: jDelta(arref of points, diagram)
#computes J_{\Delta} for the cone spanned by these points
#points should be primitive, but will make sense if not
sub jDelta{
	my @points = @{shift @_};
	my $diagram = shift;
	my $mult = multiplicityArray(\@points);
	my $answer = new UniPolynomial($mult);
	for my $p (@points){
		my $n = computeN($p, $diagram);
		my $v = sumArray($p);
		my $contrib = new UniPolynomial("$n*x + $v");
		$answer = $answer/$contrib
	}
	return $answer;
}

#usage: normalizedVolume($arref of lattice points)
#returns the normalized volume of the convex hull of the vertices
sub normalizedVolume{
	my $vertices = shift;
	my $proj = toReverseProjectiveArray($vertices);
	my $poly = new LatticePolytope(POINTS=>$proj);
	return $poly->LATTICE_VOLUME;

}

#usage: subdivideCone(arref of vertices)
#returns a subdivision of the cone by the convex hull of the vertices 
#
sub subdivideCone{

}






